#!/usr/bin/env bash

help(){
    readarray message <<"    EOF"
    Prepare repository for release by removing SNAPSHOT, tagging branch, and pushing the tag. The actual build and deploy
    is handled by travis which is triggered by the tag. If no arguments are provided it will simply remove the snapshot
    (if present) and tag/commit/push.

    Usage:
        ./prepare-release [-h] [--help] [--major] [--minor] [--patch] [--dry-run]

        -h,--help   Show this message and exit
        --major     Increment major version.
        --minor     Increment minor version.
        --patch     Increment patch version.
        --dry-run   Run without committing or pushing changes. Intermediate steps are rolled back.

    Example:
        ./prepare-release
        ./prepare-release --minor --dry-run

    EOF
    printf '%s' "${message[@]#    }"
}

MAJOR=0
MINOR=0
PATCH=0
DRY_RUN=0

while [[ $# > 0 ]]
do
key="$1"

case $key in
    -h|--help)
    help
    exit 0
    ;;
    --major)
    MAJOR=1
    shift
    ;;
    --minor)
    MINOR=1
    shift
    ;;
    --patch)
    PATCH=1
    shift
    ;;
    --dry-run)
    DRY_RUN=1
    shift
    ;;
    *)
    # unknown option
    ;;
esac
shift
done

NEW_MAJOR_VERSION='${parsedVersion.majorVersion}'
NEW_MINOR_VERSION='${parsedVersion.minorVersion}'
NEW_PATCH_VERSION='${parsedVersion.incrementalVersion}'

if [[ $MAJOR -eq 1 ]]
then
    NEW_MAJOR_VERSION='${parsedVersion.nextMajorVersion}'
    NEW_MINOR_VERSION='0'
    NEW_PATCH_VERSION='0'
fi

if [[ $MINOR -eq 1 ]]
then
    NEW_MINOR_VERSION='${parsedVersion.nextMinorVersion}'
    NEW_PATCH_VERSION='0'
fi

if [[ $PATCH -eq 1 ]]
then
    NEW_PATCH_VERSION="${parsedVersion.nextIncrementalVersion}"
fi

mvn build-helper:parse-version versions:set -DnewVersion=$NEW_MAJOR_VERSION.$NEW_MINOR_VERSION.$NEW_PATCH_VERSION &> /dev/null
RELEASE=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)

if [[ $DRY_RUN -eq 0 ]]
then
    git add $(find . -name pom.xml)
    git commit -m "preparing release $RELEASE"
    mvn scm:tag &> /dev/null
    mvn versions:commit &> /dev/null
    git push -u origin HEAD:master --tags
else
    readarray message <<"    EOF"
        git add $(find . -name pom.xml)
        git commit -m "preparing release $RELEASE"
        mvn scm:tag &> /dev/null
        mvn versions:commit &> /dev/null
        git push -u origin HEAD:master --tags
    EOF
    printf '%s' "${message[@]#        }"
    mvn versions:revert &> /dev/null
fi

echo -e "Cut release $RELEASE"